/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lotkavolterra;

import java.awt.*;
import java.util.ArrayList;

/**
 *
 * @author Tom
 */
public class LVPanel extends javax.swing.JPanel {

    LVModel model;
    DataPairList list;
    PhaseGrapherFrame phase;
    final int hStart = lotkavolterra.LotkaVolterra.hStart, pStart = lotkavolterra.LotkaVolterra.pStart;
    int left, right, up, down, ht, w, hMax, pMax;

    /**
     * Creates new form LVPanel
     */
    public LVPanel(LVModel lv) {
        model = lv;
        list = model.list;
        //phase = new PhaseGrapherFrame(list);
        
        initComponents();
        sim();
        
    }

    public LVPanel(DataPairList list) {
        this.list = list;
    }

    public void paintComponent(Graphics g) {
        setConstants();
        setMaxes();
        drawAxes(g);
        drawPoints(g);
        
        System.out.println("in LV Panel");
        System.out.println("" + list.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        printButton = new javax.swing.JButton();

        printButton.setText("Print Variables");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(printButton)
                .addContainerGap(606, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(printButton)
                .addContainerGap(491, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        System.out.println("alpha= " + model.alpha);
        System.out.println("beta= " + model.beta);
        System.out.println("a= " + model.a);
        System.out.println("b= " + model.b);
    }//GEN-LAST:event_printButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton printButton;
    // End of variables declaration//GEN-END:variables
    private void drawAxes(Graphics g) {
        drawXAxis(g);
        drawYAxis(g);
        labelAxis(g); // Finish this
    }

    private void drawXAxis(Graphics g) {
        g.drawLine(left, down, right, down);

    }

    private void drawYAxis(Graphics g) {
        g.drawLine(left, up, left, down);
    }

    public void drawPoints(Graphics g) {
        int n = list.size();
        int firstHX = left+1;
        int firstHY = down - (ht * model.getH() / hMax);
        int firstPX = left+1;
        int firstPY = down - (ht * model.getP() / pMax);
        
        for (int i = 0; i < n; i++) { // drawing H
            DataPair dp = list.get(i);
            //System.out.println("dp.getH() = " + dp.getH());
            g.setColor(Color.GREEN);
            int x = left  + (i) * w / n;
            int hY = down - (ht * dp.getH() / hMax);
            int pY = down - (ht * dp.getP() / pMax);
            
            //g.fillOval(x, hY, 5, 5);
            connectPoints(g,firstHX,firstHY,x,hY);
            
            g.setColor(Color.red);
            //g.fillOval(x,pY , 5, 5);
            
            connectPoints(g,firstPX,firstPY, x, pY);
            
            firstHX = x;
            firstPX = x;
            firstHY = hY;
            firstPY = pY;
        }

        g.setColor(Color.black);

    }

    private void labelAxis(Graphics g) {
        int n = 10;
        for(int i = 0; i < n; i ++){ // label h axis
            g.drawString("" + i*(Math.max(hMax,pMax))/n, left - 35, down - i*down/n);
            
        }
    }

    private int findHMax(ArrayList<DataPair> list) {
        int big = 1;
        for (int i = 0; i < list.size(); i++) { // drawing H
            DataPair dp = list.get(i);
            if (dp.h > big) {
                big = dp.h;
            }
        }
        return big;
    }

    private int findPMax(ArrayList<DataPair> list) {
        int big =1;
        for (int i = 0; i < list.size(); i++) { // drawing H
            DataPair dp = list.get(i);
            if (dp.p > big) {
                big = dp.p;
            }
        }
        return big;
    }

    private void sim() {

        for (int i = 0; i < 1000; i++) {
            //System.out.println(model);
            model.takeStep();
            if (model.h <= 0 || model.p <= 0) {
                break;
            }

        }
    }

    void newModel(int x, int y) {
        model = new LVModel(x, y);

    }

    void setParameters(double alpha, double beta, double a, double b) {
        model.setAlpha(alpha);
        model.setBeta(beta);
        model.setA(a);
        model.setB(b);
    }

    private void setConstants() {
        Rectangle r = this.getVisibleRect();
        left = r.x + 100;
        up = r.y + 100;
        right = r.width - left;
        down = r.height - up;
        ht = down - up;
        w = right - left;
    }

    private void setMaxes() {
        hMax = findHMax(list);
        pMax = findPMax(list);
    }

    private void initList() {
        list = model.list;
    }



    private void connectPoints(Graphics g,int firstx, int firsty, int x, int y) {
        g.drawLine(firstx, firsty, x, y);
    }



}
